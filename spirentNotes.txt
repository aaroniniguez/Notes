\\storage.cal.ci.spirentcom.com

Hardware
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
1u, 2u, etc
pod

Perforce
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
on the server there are many depots(which contain files), you use perforce on the client computer to 
get a local copy of the depot(called your workspace)(you never work directly on the files in the depot)
5. the workspace name: ainiguez_CAL-1PXBVR1_1502 is an alias for the workspace root: C:\Users\ainiguez\Perforce\ainiguez_CAL-1PXBVR1_1502
then the mappings map a depot to a location on the local drive eg: //xTAPI/... //ainiguez_CAL-1PXBVR1_1502/xTAPI/...
so there is a viewing of the //XTAPI depot at C:\Users\ainiguez\Perforce\ainiguez_CAL-1PXBVR1_1502/xTAPI/...
6. paths above are separated by foward slashes. 
7. from the viewable depots(the depots you are allowed to see, from the mappings), you can use the --get operation--, which gets the file
from the depot to your local machine.
8. files gotten used with get are read only.
9. repositories are another name for depots. 
10. you edit files by doing "check out"(which then creates a changelist) then you can just open the file and edit it, then after you save, 
you submit the changelist, which changes the file in the depot(repository)
11. you can add a file from windows, then you can do add and then submit changelist(with description)
12. you can see all the pending changelists by going to view->pending changelists(in the case of deleting a file you can see it was deleted
in the changelist and then you can view the pending changelist and submit the delete action)(faster way to delete and submit?)
13. so in summary you can: 
	a. check out(aka edit)
	b. mark for add
	c. mark for delte
	d. get(have to do this first)
	e. submit
20. pv4 is name of the gui for perforce


Python
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

global variables in python written as ex: 
global path

there are static and non-static methods in python classes. you make a function static in python like this: 
    @staticmethod
    def mix_ingredients(x, y):
        return x + y
the difference is
the method no longer requires a self argument(that references the object) as it would if it were a non-satic method. so for functions that don't use the objec, you make them static. 
python doesn't have to create a bound-method which are costlier

working with files 
file = open("filename", "w") --- opens the file
file.seek() ---  then you can move the files current position to the beginnging with file.seek(0) and then write with: 
file.write() --- writes to the file
file.read --- can read the file file.read(1) reads 1 character or 1 byte, file.read() reads the entire files
file.close() --- have to close the file when you are done with it

The first argument of every class method, including __init__, is always a reference to the current instance of the class. By convention, this argument is always named self, eg: 
def getList(self, arg a, arg b)

debugging python code:
write your python code
quit()

to get good error notes in python do
import traceback
try: 
except Exception as e:
	traceback.print_exc();


get type of variable --- type(variable name)

python string.split("word") returns a list and does not affect the original string


sorted(student, key = lambda student: student["name"])
sorted(student, key = lambda student: student["name"], reverse= True)

sorted(mytuple, key = lambda tup:tup[1])

mytuple is a tuple that looks like: 
mytuple = ((1,"hello"),(2,"bye"),(3,"AC"))

the individual items in the tuple are passed to the right part of the sorted function and set as tup(or whatever name you want), 
then the lambda function return tup ordered by tup[1]
so sorted returns the list or tuple ordered


>>> def f (x): return x**2
... 
>>> print f(8)
64
>>> 
>>> g = lambda x: x**2
>>> 
>>> print g(8)
64


sortedList = sorted(requestList,key = self.doSome,reverse = True )

each element of requestList is given to the function doSome() before the elements are sorted


json file:

dictionary with unicode values: 
{u'some_list': [1, 2, 3], u'some_text': u'my text', u'some_number': 12345, u'null_value': None}
is a python object.

To convert to a json string: 
'{"some_list": [1, 2, 3], "some_text": "my text", "some_number": 12345, "null_value": null}'

use json module:
import json
jsonString = json.dumps(python object)

sort processes from left to right!

2014/23/34 etc

to convert from unicode string to string do
str(unicode string)


you can add lists in python!

mylist1 = [1]
mylist2 = [2]
mylist1+mylist2
[1,2]

To append a list to another list do list.extend(list)

string.strip() trims white space on both sides

instead of concatenating a list and string and then printing which you cannot do, do this:

print "names list: ", nameslist

python uses and instead of && in it's conditional


python exception handling: 

try: 
	do something
except: 
	catch all the errors

	In vim to move to end of line and edit do A instead of $


in python: 

tuples use parentesis () instead of [] like lists


the class dog is a subclass of animal(aka "dog is an animal") and inherits the properies of animal
class Animal(object):
  speakStr = 'Hello from Animal'
  pass
class Dog(Animal):
  pass

bark = Dog.speakStr
print(bark)

python run commands and get output
import subprocess
process = subprocess.Popen('java -jar /home/ProjectJenkins/jenkins-cli.jar -s http://jenkins-rel.cal.ci.spirentcom.com:8080/ list-jobs',shell=True, stdout=subprocess.PIPE)
out,err = process.communicate()
print(out)


python how to print out a dictionaries key value pairs

for key,value in dict.iteritems():
	print key,value


python pass statement
if blah in blah: 
	pass

can usee the pass statement as a placeholder for other code



import xml.etree.ElementTree
from xml.dom.minidom import parse
import xml.dom.minidom


xmldoc = xml.dom.minidom.parse("test.xml")
insertItem = xmldoc1.getElementsByTagName("scm")[0]
xmldoc.documentElement.replaceChild(insertItem,xmldoc.getElementsByTagName("scm")[0])
print insertItem.toxml()
xmldoc1 = xml.dom.minidom.parseString(xmlstring)


multiple lines of text

do triples quotes 

myvar = """
"""

create a tempfile
import os
import tempfile

temp = tempfile.NamedTe	mporaryFile()
try:
    print 'temp:', temp
    print 'temp.name:', temp.name
finally:
    # Automatically cleans up the file
    temp.close()
print 'Exists after close:', os.path.exists(temp.name)





Jenkins
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

jenkins runs on some server, then it runs python projects on different servers. 
you can set a chron table for jenkins, can set what you shell script you want to execute(to start your python project): all of this is located in the configure section. 

enabling job in jenkins means you can run the python files in it now!
build environment inject passwords to the build as environment variables
and doing export in the execute shell area are the same thing in jenkins!


Shell(bash)
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

export a1=/home/jenkins/workspace/token_automation/files/
each new session in putty has different environment variables that can be set. 

clear && printf '\033[3J'
to clear terminal and scrollback for easy debugging in putty
create an alias so that when you run a function in linux it does somethign else. 
alias clear="clear && printf '\033[3J'"

alias ls="ls -l --color=auto"
each group has 3 permission rwx
chmod u=rwx,g=rx,o=rx filename

use grep -r "" *

to pipe into a file do 

command > myfile.txt

Vim
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

delete till end of file in vim: dG
0 takes you to beginning of the line

SQL
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------


select 1 from contact where id=12
this selects 1 row or none from contact table where id = 12 

select exists(select 1 from contact where id =12)
this returns true or false if the row where id = 12 exists

product_no integer REFERENCES products (product_no),
Now it is impossible to create orders with product_no entries that do not appear in the products table.

We say that in this situation the orders table is the referencing table and the products table is the referenced table. Similarly, there are referencing and referenced columns.

truncate table to delete the table contents

in postgres you use ' ' not ""

click on database then do backup with plain file(this will create an sql file )
then you can run \i filename.sql(windows uses /)


GIT
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

//to download the repository
git clone your_repo_name
//if you edit a file in the repo(which is now in your workspace)
git commit -am "your message"
//then push
git push
//to delete a file:
git rm file_name
//then commit the deletion and push




Javascript
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

// global variable
var allUserData = [];

// generic logStuff function that prints to consol
for (var i = 0; i < 10; i ++){
    $.get( "https://52.42.47.60:8000/index.html", function( data ) {
      $( ".result" ).html( data );
    }).done(function() {
    console.log( "second success" );
  });
}

@user1691818: Returning the data is a really bad idea. Instead learn to think with callbacks. Cut and paste whatever code you need to execute in the callback function passed to success. – slebetman Sep 27 '12 at 6:35

using callbacks is asynchronous apparently....
http://callbackhell.com/


Django: 
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

the function using means you use the database testresult
TestSuite.objects.using('result')


Easy to Debug in Django: 
raise Http404('Error occured when exporting csv file')^

qs.filter(defects__icontains=match_content)^
modelObject._meta.get_all_field_names()

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

//http://jenkins-smt.cal.ci.spirentcom.com:8080/view/TEST/job/STR-QEMU-DEBUG-Results/configure
http://jenkins-smt.cal.ci.spirentcom.com:8080/view/TEST/job/STR-QEMU-DEBUG/configure

dependency sshpass for linux: sudo apt-get install sshpass
questions: 

for the configure windows box.  its a windows command what about linux?
for the configure windows box. what to do if different job? need to put the file in the node again?
ask about sshpass

to do::: write script that auto runs build qemu debug thing
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
