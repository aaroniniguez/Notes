linux commands: 
---------------------------
export VAR=value
declare will create a read only variable
declare -r myvarname=aaron
myvarname=test will return an error saying it is readonly. 

sort sorts the contents of a text file, line by line.
sort -n     sorts the numbers in a file by their numeric value 
nl numbers the lines in the file 

head -5
tail -5

display the location of your current working directory, run: pwd
~ is your home directory, can see what it is by doing echo $HOME

jobs -l show the active jobs in the shell, jobs only shows the jobs from the current shell, not from other shell sessions

top shows realtime process information while ps shows a single snapshot

shutdown -r now     reboot
shutdown -h now 
shutdown 10 daily maintenace put any message here

edit crontab like this:

crontab -e
crontab located in: 
/var/spool/cron/crontabs
port 110 is pop3 for email, 

port 21 is ftp 

expr 
expr 1 + 3 
expr 1 \* 3

check what type of linux box you have 
lsb_release -a
or check what kernel version you have 
uname -r

file permissions:
--------------------------------
each file and directory has three user based permissions groups
1. owner
2. group
3. all users
 
each one has 
1. read
2. write
3. execute

doing ls -l

first 3 chars are owner -> group -> all users
ls -l shows 

ls -alh --color

move multiple files to a source destination
mv -t src file1 file2 file3

permissions, number of hardlinks, file owner, file group, file size

A Bash alias is essentially nothing more than a keyboard shortcut, an abbreviation, a means of avoiding typing a long command sequence. 
If, for example, we include alias lm="ls -l.

to make the alias permanent put the alias lm="ls -l" line in the ~/.bashrc file
jobs command: 

shows the active jobs in a shell
jobs
fg 1

killing stopped jobs do kill %1, kill %2 etc

putting an ampersand after a command will run the command in the background. 
Note that when you put & the output - both stdout and stderr - will still be printed onto the screen. If you do not want to see any output on the screen, redirect both stdout and stderr to a file by:
ping 8.8.8.8 &> /dev/null &

grep 
can grep contents from another program(output pipe)
ls -a | grep ss
grep is used to find text inside a file
find is used to search for filenames
find . -name "*zero*" where there is a filename in the current directory containing zero in it
-------------
search for string in file in the directory
grep -r mystring
search a specific file: 
grep root /etc/passwd

grep 
1.bash: there is bourne again shell called bash
2.sh standard shell
3. kourn shell 
4. c shell 


Find out what shell you are using: 
echo $SHELL


Bash Scripting
---------------------
for {1..5}
do 
	echo $1
done

variables: 
-------------------
str="hello world"                      ..........no spaces
echo $str

running command line commands:
====================================
myvar=$(ls)

for loop
------------------------
for i in $(seq 1 10); do
	echo item: $i
done
if statement in bash 
for loop over numbers in bash 
arithmetic expressions in bash 

cat 

cat filename
this will output the contents of the filename 

lsof 
lists all open files. 

zombie processes:
zombie processes are bits of dead processes that haven't been cleaned up properly. 
A zombie process has no resources allocated to it whatsoever, other than the entry in the process tree



hard link: 
ln foo bar
foo is an existing file, bar is a file to create

soft link:
ln -s file1 file2

hard links
soft links aka symbolic links

an inode is a data structure on a filesystem in linux
Underneath the file system files are represented by inodes (or is it multiple inodes not sure)
to list all the current files and their inode numbers do ls -i
you can look at the inode details with:
stat fileName

the filesystem in linux has only modified time, changed time, and accessed time(no birth time)

A file in the file system is basically a link to an inode.
A hard link then just creates another file with a link to the same underlying inode.

When you delete a file it removes one link to the underlying inode. The inode is only deleted (or deletable/over-writable) when all links to the inode have been deleted.

A symbolic link is a link to another name in the file system.

Once a hard link has been made the link is to the inode. deleting renaming or moving the original file will not affect the hard link as it links to the underlying inode. 
Any changes to the data on the inode is reflected in all files that refer to that inode.

Note: Hard links are only valid within the same File System. Symbolic links can span file systems as they are simply the name of another file.


hard links are faster, soft links take less space cause its just a pointer. 

netstat stands for network statistics 
netstat -tulpn | grpe LISTEN to see which ports are being listened on 
piping(|)
piping is for use between programs
example: 
	ls | head -3 > myfile3.txt
cat myfile3.txt
cat -n myfile3.txt prints file along with numbering it
tac myfile3.txt reverses the order of the lines making it easier for debugging
the greater than operator( > ) 
is for putting output into a file (redirecting to a file), this overwrites the file

the ( >> ) operator appends the file
	
changes owners permissions.
chmod u=rwx myfile
chmod u=r myfile
chmod u=rwx,g=rx,o=r myfile
(user, group, other)

As long as you own the parent directory you can remove, or replace a file no matter the permission since you can change the content of the directory :).

----first name is owner, second name is group
the very first letter: 
– regular file
l link file
d directory
p pipe
c character special device
b block special device

echo $0 

empty a file in linux
 cat /dev/null >test.txt

create an alias, create a shortcut: 

[iniguez@lnxsrv05 ~/LINUX]$ 
alias ls='ls -al'

seq  25 > test.txt
seq 1 100
seq 100
print out aaron continuously
yes aaron 


run multiple commands on the same line(use && operator)
 ls && cd intro_module/

get the numberof lines in a file: 
wc -l filename.txt		

file descriptors 
0 stdin
1 stdout
	redirect stdout to /dev/null
	command > /dev/null
2 stderr

ls | tee –a file 
write to somewhere and sent to stdout at the same time

find out all users currently logged into the system: 
who

check the user id of a user
id -u ubuntu
id -u root
(or use the environmental variable):
echo $UID
root always has user id of 0

control z sends a SIGSTOP signal which suspends a process
control c sends a SIGINT signal which kills a  process. 

to get the ip of a server:
/sbin/ifconfig
inet addr

what is /etc/services?
it maps port numbers to named services...

/etc/passwd
has one entry line for each user 
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin

the encrypted password x, means password is stored in: 
/etc/shadow

Puppet
============
framework for system automation	

sleep command linux
sleep 100
pauses for 100 seconds

find location or path of an executable
whereis grep

iptables is a kernel based firewall service

linux run levels(runlevel)
vi /etc/inittab
0 - hault
1 -single user mode
2. -multiuser
3. full multiuser mode ...etc. 
6 -reboot

check what runlevel is currently running: 
$ runlevel

can change the run level 
[root@attic4-cent ~]# telinit 5

can send a message to everyone on the system:
wall blaah blah 


The /dev directory

contains special device files for all devices. 



on linux human readable is -h such as ls -alh

check space on linux with df -h
downloaded ilmbase-2.2.0


history command linux pick specific line

!number

git add .
git commit -am "here is your commit message" 
git push ...(then enter your username + password)

update your repository to the newest commmit 
git pull

remove file from github

git rm filename
git commit -am "removed file"
git push ...etc

or do a rm like normal and then do:
or can do git add -A

add a user to linux
useradd aaron
When we add a new user in Linux with ‘useradd‘ command it gets created in locked state and to unlock that user account, we need to set a password for that account with ‘passwd‘ command.

passwd aaron

then can login like:
su - [user]
